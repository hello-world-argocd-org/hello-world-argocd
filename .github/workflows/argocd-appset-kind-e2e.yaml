name: Argo CD ApplicationSet E2E (Kind)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      APPSET_DIR: applicationsets
      ARGO_NS: argocd
      ARGO_HELM_CHART_VERSION: "5.51.6"
      WAIT_ROLLOUT: "240s"
      WAIT_APPS: "90"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools (Helm, yq, jq)
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          sudo curl -fsSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update -y && sudo apt-get install -y jq

      - name: Create Kind cluster
        uses: helm/kind-action@v1.8.0

      - name: Install Argo CD (ApplicationSet enabled)
        run: |
          set -euo pipefail
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          kubectl create namespace "$ARGO_NS" --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install argocd argo/argo-cd \
            --namespace "$ARGO_NS" \
            --version "$ARGO_HELM_CHART_VERSION" \
            --set applicationSet.enabled=true \
            --wait
          kubectl -n "$ARGO_NS" rollout status deploy/argocd-repo-server --timeout="$WAIT_ROLLOUT" || true

      - name: Show what we are going to apply
        run: |
          for f in $APPSET_DIR/*.yaml; do
            echo "---- $f ----"
            yq e '.kind + " " + .metadata.name' "$f" || true
          done

      - name: Apply ApplicationSet manifests
        run: |
          kubectl -n "$ARGO_NS" apply -f "$APPSET_DIR/"

      - name: Sanity — repo-server can reach GitHub and list refs
        run: |
          set -euo pipefail
          POD=$(kubectl -n "$ARGO_NS" get pod -l app.kubernetes.io/name=argocd-repo-server -o jsonpath='{.items[0].metadata.name}')
          CONTAINER=$(kubectl -n "$ARGO_NS" get pod "$POD" -o jsonpath='{.spec.containers[0].name}')
          kubectl -n "$ARGO_NS" exec "$POD" -c "$CONTAINER" -- sh -c 'getent hosts github.com || nslookup github.com || true'
          kubectl -n "$ARGO_NS" exec "$POD" -c "$CONTAINER" -- git ls-remote https://github.com/hello-world-argocd-org/hello-world-delivery.git | head -n1

      - name: Wait for Applications to be generated
        run: |
          set -euo pipefail
          end=$((SECONDS + WAIT_APPS))
          ok=0
          while [ $SECONDS -lt $end ]; do
            count=$(kubectl -n "$ARGO_NS" get applications.argoproj.io -o json 2>/dev/null | jq '.items | length')
            if [ "${count:-0}" -ge 1 ]; then
              echo "Found $count Application(s)."
              ok=1; break
            fi
            kubectl -n "$ARGO_NS" logs deploy/argocd-repo-server --tail=10 2>/dev/null || true
            sleep 5
          done
          kubectl -n "$ARGO_NS" get applications.argoproj.io || true
          if [ "$ok" -ne 1 ]; then
            echo "❌ No Applications were generated in ${WAIT_APPS}s."; exit 1
          fi
          

      - name: Verify application endpoints
        shell: bash
        run: |
          set -euo pipefail

          check_env() {
            local ns="$1"
            local expected="$2"
            local svc="springboot-app"
            local port="8080"
            local local_port="18080"

            echo "--> Waiting for deployment in namespace $ns"
            kubectl -n "$ns" rollout status deploy/$svc --timeout=180s

            echo "--> Port-forwarding service in $ns"
            kubectl -n "$ns" port-forward "svc/$svc" $local_port:$port >/tmp/pf-$ns.log 2>&1 &
            pf_pid=$!

            # Give port-forward a moment to start
            sleep 3

            # Curl and compare
            actual=$(curl -fsS http://127.0.0.1:$local_port/ || true)
            echo "Got: $actual"
            if [[ "$actual" != "$expected" ]]; then
              echo "::error::$ns returned unexpected response"
              echo "Expected: $expected"
              echo "Actual:   $actual"
              kill $pf_pid || true
              exit 1
            fi

            kill $pf_pid || true
            wait $pf_pid 2>/dev/null || true
            echo "✅ $ns OK"
          }

          check_env dev   "Shared value: [5] env value: [DEV]"
          check_env stage "Shared value: [5] env value: [STAGE]"
          check_env prod  "Shared value: [5] env value: [PROD]"

      # Always show diagnostics if something fails
      - name: Dump detailed diagnostics on failure
        if: failure()
        run: |
          set -euo pipefail
          echo "::group::Cluster info"
          kubectl cluster-info || true
          kubectl version || true
          echo "::endgroup::"

          echo "::group::All resources summary"
          kubectl get all -A -o wide || true
          echo "::endgroup::"

          echo "::group::Events (sorted)"
          kubectl get events -A --sort-by=.lastTimestamp || true
          echo "::endgroup::"

          echo "::group::Ingresses"
          kubectl get ingress -A -o yaml || true
          echo "::endgroup::"

          echo "::group::Endpoints"
          kubectl get endpoints -A -o yaml || true
          echo "::endgroup::"

          echo "::group::Namespace-specific deep diagnostics"
          for ns in dev stage prod; do
            echo "---- Namespace: $ns ----"
            kubectl -n "$ns" get all -o wide || true
            kubectl -n "$ns" get events --sort-by=.lastTimestamp || true
            pods=$(kubectl -n "$ns" get pods -o name || true)
            for pod in $pods; do
              echo "==== Describing $pod ===="
              kubectl -n "$ns" describe "$pod" || true
              echo "==== Logs for $pod ===="
              kubectl -n "$ns" logs "$pod" --all-containers --timestamps || true
              echo "==== Previous logs for $pod (if restarted) ===="
              kubectl -n "$ns" logs "$pod" -p --all-containers --timestamps || true
            done
          done
          echo "::endgroup::"

